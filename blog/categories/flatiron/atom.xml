<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron | Daniel Glatstein's Blog]]></title>
  <link href="http://danielglatstein.github.io/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://danielglatstein.github.io/"/>
  <updated>2015-10-29T09:11:24-04:00</updated>
  <id>http://danielglatstein.github.io/</id>
  <author>
    <name><![CDATA[Daniel Glatstein]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spooky]]></title>
    <link href="http://danielglatstein.github.io/blog/2015/10/28/spooky/"/>
    <updated>2015-10-28T18:22:54-04:00</updated>
    <id>http://danielglatstein.github.io/blog/2015/10/28/spooky</id>
    <content type="html"><![CDATA[<p>This week I was introduced to Rails, and there has been a whirlwind of new information and abstractions.</p>

<p>While working on a lab, there was a problem that was particularly illuminating on how Rails abstracts away code that the programmer would otherwise have to write themselves in Ruby.</p>

<p>The lab asked the engineer to build a blog with many Posts, which could have multiple tags. Each tag had to have a unique name and the user should be able to create their own unique tag.</p>

<p>I was able to add collection_check_boxes to my Post form (which in itself is an awesome abstraction).</p>

<pre><code class="``ruby">  &lt;%= f.collection_check_boxes :tag_ids, Tag.all, :id, :name %&gt;
</code></pre>

<p>The next step was to add a text_field at the end of this list of tags, in order to allow the user the opportunity to generate their own unique tag for their Post by adding a field_for Tags form to my form_for Post.</p>

<pre><code class="``ruby ">  &lt;%= f.fields_for :tags, Tag.new do |tags_form| %&gt;
      &lt;li&gt;
        &lt;%= tags_form.label :name %&gt;
        &lt;%= tags_form.text_field :name %&gt;
      &lt;/li&gt;
  &lt;% end %&gt;
</code></pre>

<p>  However&hellip;when I launched up the server and created a new post whose tags exclusively included preexisting ones I got this:</p>

<p>  <img src="../images/empty_string.png" height="150" width="150"></p>

<p>  D'oh, my Tag name was passed into the unordered list on the Posts show page.</p>

<p>  So I started to troubleshoot the bug by adding a raise in the create action of my PostsController in order to see the paramaters that were being returned:</p>

<pre><code class="``ruby">    class PostsController
      def create
        raise
        @post = Post.new(post_params)
      end
    end
</code></pre>

<pre><code class="``ruby">    "post"=&gt;{"name"=&gt;"bbq", "content"=&gt;"healthy living", "tag_ids"=&gt;["2", "13", ""], "tags_attributes"=&gt;{"0"=&gt;{"name"=&gt;""}}}, "commit"=&gt;"Create Post", "controller"=&gt;"posts", "action"=&gt;"create"
</code></pre>

<p>  And there it is! tags_attributes is passing {name => &ldquo;&rdquo;}.</p>

<p>  My first reaction was to write a method that would serve as validation for a Tag&rsquo;s name along the lines of this:</p>

<pre><code class="``ruby">    def empty_name(post_attr)
      post_attr.hash.map do |label, name_hash|
        name_hash.delete_if{|label, name| name == ""}
      end
    end
</code></pre>

<p>  But, if the point of Rails is convention over configuration, the framework should provide a method that would make this much easier.</p>

<p>  The first thing that the google-machine returned for me was a reject_if clause that would go in toPost model:</p>

<pre><code class="``ruby">    class Post
      accepts_nested_attributes_for :tags, reject_if: proc { |attributes| attributes[:name].blank? }
    end
</code></pre>

<p>  Amazing! I actually used a Proc! But, to me this isn&rsquo;t super readable.</p>

<p>  So the second way of skining this cat was to create a private method in my Post model that I could call on:</p>

<pre><code class="``ruby">    class Post
      accepts_nested_attributes_for :tags reject_if: :blank_name?

      private

      def blank_name?(attribute)
        attribute['name'].blank?
      end
    end
</code></pre>

<p>  This is nice and readable and is hiding a lot behind the scenes. Which isn&rsquo;t necessarily a good thing.</p>

<p>  The third solution that I thought of to solve this problem was to write out a tag_attributes=() method myself, thereby replacing the accepts_nested_attributes_for.</p>

<pre><code>```ruby
  class Post
    #attributes = {"tag_1"=&gt;{"name"=&gt;"WW1"}, "tag_2"=&gt;{"name"=&gt;"WW2"}, "tag_3"=&gt;""}
    private

    def courses_attributes=(attributes)
      attributes.each do |tag_hash|
        self.courses.build(tag_hash) if tag_hash[:name].present?
      end
    end
  end
```
</code></pre>

<p>  The amazing thing about programming is that it involves a lot of creativity and decision making. This problem was a great example to me of how one problem could be solved in many different ways, each with pros and cons. It is extremely valuable to someone like myself, who is new to Ruby on Rails, to learn from trial by fire. By experimenting as much as I can, and by attempting to explore the pros and cons of every solution I am helping myself to recognize patterns in the future, thereby making it easier to debug future applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post On Octopress]]></title>
    <link href="http://danielglatstein.github.io/blog/2015/09/28/my-first-post-on-octopress/"/>
    <updated>2015-09-28T17:46:20-04:00</updated>
    <id>http://danielglatstein.github.io/blog/2015/09/28/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Spatial metaphors permeate our thoughts and language.</p>

<p>Analyzing a common phrase will proove this point.</p>

<blockquote>“the meeting is <b>AT</b> 3”. </blockquote>


<p>3 pm is not a physical place, but we use the word <b>AT</b> to describe our relation to it.</p>

<p>The idea of language and space are inexplicably tied together and are integral for us to be able to communicate with one another. Take for example this Ghanaian commercial from 2009 for Blink Wireless:</p>

<p><video width="320" height="240" controls>
  <source src="../images/blink_sd.mp4" type="video/mp4">
</video></p>

<p>The idea of spatial metaphors goes back hundreds of years. For instance, this sonnet written by Shakespeare emphasizes the difference between he and the woman he desires by describing the two distinctly different spaces they inhabit:</p>

<blockquote>
To Jade<br>
Sweet Jade, by whom my transient hopes are dash’d,<br>
To whom persistent fools attend in constant thrall,<br>
Woulds’t not enmesh me in thy web,<br>
That I may browse the fairest form of all?<br>
<b>And tho’ an object not of thy class</b>,<br>
Whose primitive root excites no deference,<br>
Still dare I hope, as Time doth pass,<br>
Thy hidden attributes to reference.<br>
Such vain collections of idle loons<br>
Do dote upon thy treasur’d face,<br>
<b>Shall I then be class’d with these poltroons</b>,<br>
<b>And, tarr’d by their methods, invite disgrace?</b><br>
<br>
Spring me, sweeting, from this fever’d trap,<br>
Or cast me forth to roam the global map.
</blockquote>


<p>Here, the speaker is comparing two Objects, one of great beauty and the other disgraced. The specificity of the language that Shakespeare uses helps to shed light on what each object represents.</p>

<p>OOP uses physical metaphors to help us interact with abstract ideas.</p>

<p>Defining our classes and methods with concise, impactful language gives our Objects dynamic meaning and helps the programmer to communicate their intent.</p>

<pre><code class="ruby">def player_stats(name)
 game_hash.each do |key, value|
   value.each do |k, v|
     v.each do |stuff, more_stuff|
       if stuff == name
         return more_stuff
       end
     end
   end
 end
end
</code></pre>

<p>If someone unfamiliar with the code were to look at this method, it would be hard to see what the data any of the iterations were operating on.</p>

<p>After learning to define my methods more clearly the code came out something like this:</p>

<pre><code class="ruby">def player_stats(player_name)
  player = find_player(player_name)
  player.delete(:player_name)
  player
end
</code></pre>

<p>Refactoring my code had a similiar affect on my CLI Hangman game.</p>

<p>My initial outline of the application charged the Game class to be responsible for the Player&rsquo;s guesses. However, while refactoring I began to think that a separate Player class should be responsible for the guess. After all, when describing my intent in an english sentence I would say, “The <b>player</b> guesses the <b>letter</b> that will be printed in the <b>game</b>.”</p>

<p>I anticipate that as the cohort moves forward with MVC, naming classes will become critical the creating concise descriptive code. In the future, I would love to start a database of synonyms and the etymology for commonly used method and class names. This database would serve as an extremely helpful tool towards choosing exactly the right word for the Object and/or process that I am trying to describe. I eagerly await the challenge ahead to get better at naming in my code.</p>
]]></content>
  </entry>
  
</feed>
